apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: lead-gen
data:
  fluent.conf: |
    <match fluent.**>
        # this tells fluentd to not output its log on stdout
        @type null
    </match>
    # here we read the logs from Docker's containers and parse them
    <source>
      @type tail
      path /var/log/containers/*.log   ##Pod에 대한 로그만 수집됨(경로 특성상)
      pos_file /var/log/app.log.pos    ##Pod로그에 대한 수집 정보들 정리 파일
      tag kubernetes.*   ##쿠버네티스 로그를 수집하는 과정(docker등 다양한 tag도 있음)
      read_from_head true
      <parse>
        @type none
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>
    # we use kubernetes metadata plugin to add metadatas to the log
    <filter kubernetes.**>
        @type kubernetes_metadata
    </filter>

    ## 로그 : /var/log/containers/*.log에서 수집되는 단어 중##
    ## 아래 필터에 적용된 pattern만 수집한다!
    <filter **>
      @type grep
      <regexp>
        key message
        pattern success|error|failure|403|300|200
      </regexp>
    </filter>
    
    <filter **>
      @type grep
      <regexp>
        key message
        pattern CDD|
        invert true ##해당 pattern에 대해서는 제외
      </regexp>
    </filter>

     # we send the logs to Elasticsearch
    <match **>
       @type elasticsearch_dynamic
       @log_level info
       include_tag_key true
       host "#{ENV['FLUENT_ELASTICSEARCH_HOST']}"
       port "#{ENV['FLUENT_ELASTICSEARCH_PORT']}"
       user "#{ENV['FLUENT_ELASTICSEARCH_USER']}"
       password "#{ENV['FLUENT_ELASTICSEARCH_PASSWORD']}"
       scheme "#{ENV['FLUENT_ELASTICSEARCH_SCHEME'] || 'http'}"
       ssl_verify "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERIFY'] || 'false'}"
       reload_connections true
       logstash_format true
       logstash_prefix logstash
       <buffer>
           @type file
           path /var/log/fluentd-buffers/kubernetes.system.buffer
           flush_mode interval
           retry_type exponential_backoff
           flush_thread_count 2
           flush_interval 5s
           retry_forever true
           retry_max_interval 30
           chunk_limit_size 2M
           queue_limit_length 32
           overflow_action block
       </buffer>
    </match>
